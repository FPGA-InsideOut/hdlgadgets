module custom_logic_join #(parameter D_WIDTH = 6)
(
input                   clk,
input                   rst,
input  [(D_WIDTH-1):0]  up_data_a,
input                   up_valid_a,
output                  up_ready_a,
input  [(D_WIDTH-1):0]  up_data_b,
input                   up_valid_b,
output                  up_ready_b,
output [(D_WIDTH-1):0]  down_data,
output                  down_valid,
input                   down_ready
);

//Connect signals to the debug vector for visualisation
wire [7:0] debug;


//REASSIGN DEBUG SIGNALS AS NEEDED
assign debug[7] = sel;
assign debug[6] = en;
assign debug[5] = 1'bx;
assign debug[4] = 1'bx;
assign debug[3] = 1'bx;
assign debug[2] = 1'bx;
assign debug[1] = 1'bx;
assign debug[0] = 1'bx;


//BEGIN CUSTOM LOGIC BLOCK
//THIS IS IMPLEMENTATION OF ROUND-ROBIN FLIT MULTIPLEXOR (BLOCKING)
reg sel;
wire en;

//Round robin multiplexing using 1bit counter
always @(posedge clk)
  if (rst) begin
    sel <= 1'b0;
    end else if (en) begin
    sel <= sel + 1;
    end

assign en = down_valid & down_ready;

//Mux for assigning down_valid and down_data
assign down_data = (sel) ? up_data_b : up_data_a;
assign down_valid = (sel) ? up_valid_b : up_valid_a;
//Demux for up_ready_a and up_ready_b
assign up_ready_a = (~sel & down_ready);
assign up_ready_b = (sel & down_ready);

//END CUSTOM LOGIC BLOCK

endmodule
